#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Get contract address from command line or deployment output
const contractAddress = process.argv[2];

if (!contractAddress) {
  console.error('Please provide the contract address as an argument');
  console.error('Usage: npm run update-frontend -- <contract-address>');
  process.exit(1);
}

// Validate address format
if (!/^0x[a-fA-F0-9]{40}$/.test(contractAddress)) {
  console.error('Invalid contract address format');
  process.exit(1);
}

console.log(`Updating frontend with ChatApp at ${contractAddress}...`);

// Read the compiled contract artifact
const artifactPath = path.join(__dirname, '../contracts/out/chatApp.sol/ChatApp.json');
let artifact;

try {
  const artifactContent = fs.readFileSync(artifactPath, 'utf8');
  artifact = JSON.parse(artifactContent);
} catch (error) {
  console.error('Error reading contract artifact:', error.message);
  console.error('Make sure to run "forge build" first');
  process.exit(1);
}

// Extract ABI and bytecode
const { abi, bytecode } = artifact;

// Create the deployed contracts configuration
const deployedContracts = {
  11155931: {
    ChatApp: {
      address: contractAddress,
      abi: abi,
      bytecode: bytecode.object,
      blockNumber: 0, // Will be updated when we fetch from chain
      deployedAt: new Date().toISOString()
    }
  }
};

// Write to frontend contracts file
const outputPath = path.join(__dirname, '../frontend/contracts/deployedContracts.ts');
const outputDir = path.dirname(outputPath);

// Ensure directory exists
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Generate TypeScript file content
const fileContent = `// Generated by deployment script - do not edit manually
// Last updated: ${new Date().toISOString()}

export const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export type DeployedContracts = typeof deployedContracts;

// Helper to get contract by name
export function getContract(chainId: number, contractName: keyof DeployedContracts[number]) {
  return deployedContracts[chainId]?.[contractName];
}

// RISE Testnet ChatApp
export const CHATAPP_ADDRESS = "${contractAddress}";
export const CHATAPP_ABI = ${JSON.stringify(abi, null, 2)} as const;
`;

try {
  fs.writeFileSync(outputPath, fileContent);
  console.log('✅ Frontend contracts updated successfully!');
  console.log(`   Contract address: ${contractAddress}`);
  console.log(`   Output file: ${outputPath}`);
  console.log('');
  console.log('Next steps:');
  console.log('1. cd frontend');
  console.log('2. npm run dev');
  console.log('3. Open http://localhost:3000');
} catch (error) {
  console.error('Error writing contracts file:', error.message);
  process.exit(1);
}

// Also create a separate WebSocket configuration file
const wsConfigPath = path.join(__dirname, '../frontend/src/config/websocket.ts');
const wsConfigDir = path.dirname(wsConfigPath);

if (!fs.existsSync(wsConfigDir)) {
  fs.mkdirSync(wsConfigDir, { recursive: true });
}

const wsConfigContent = `// WebSocket configuration for RISE
export const RISE_WS_URL = process.env.NEXT_PUBLIC_RISE_WS_URL || 'wss://testnet.riselabs.xyz/ws';
export const RISE_RPC_URL = process.env.NEXT_PUBLIC_RISE_RPC_URL || 'https://testnet.riselabs.xyz';
export const RISE_CHAIN_ID = 11155931;
export const RISE_EXPLORER_URL = 'https://explorer.testnet.riselabs.xyz';

// Contract addresses for WebSocket subscriptions
export const CONTRACTS = {
  ChatApp: "${contractAddress}"
} as const;
`;

fs.writeFileSync(wsConfigPath, wsConfigContent);
console.log('✅ WebSocket configuration created');