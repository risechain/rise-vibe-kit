name: CLI Tests

on:
  push:
    branches: [main, develop, feat-*]
  pull_request:
    paths:
      - 'create-rise-app/**'
      - 'frontend/**'
      - 'contracts/**'
      - '.github/workflows/cli-tests.yml'

jobs:
  test-cli:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        template: [chat, pump, frenpet, leverage]
    
    name: Test ${{ matrix.template }} on Node ${{ matrix.node-version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: create-rise-app/package-lock.json
      
      - name: Install CLI dependencies
        working-directory: create-rise-app
        run: npm ci
      
      - name: Run CLI tests
        working-directory: create-rise-app
        run: npm test
      
      - name: Test template creation - ${{ matrix.template }}
        run: |
          # Debug: Show current structure
          echo "Current directory: $(pwd)"
          echo "Contents of create-rise-app:"
          ls -la create-rise-app/
          echo "Contents of frontend:"
          ls -la frontend/src/components/ | head -10
          
          # Create a temporary directory for tests
          mkdir -p test-apps
          cd test-apps
          
          # Run the CLI from here
          node ../create-rise-app/bin/cli.js test-${{ matrix.template }} -t ${{ matrix.template }} -y --no-install --no-git
          
      - name: Verify hook structure
        run: |
          # Check general hooks exist
          test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/useAutoWallet.ts
          test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/useContractFactory.ts
          test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/useRiseWebSocket.ts
          
          # Check template-specific hooks exist
          case "${{ matrix.template }}" in
            chat)
              test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/chat/useChatAppContract.ts
              test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/chat/useChatEvents.ts
              ;;
            leverage)
              test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/leverage/useLeverageTrading.ts
              test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/leverage/useMockUSDC.ts
              ;;
            pump)
              test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/pump/useTokenLaunchpad.ts
              ;;
            frenpet)
              test -f test-apps/test-${{ matrix.template }}/frontend/src/hooks/frenpet/useFrenPet.ts
              ;;
          esac
          
      - name: Verify component structure
        run: |
          # Check UI components exist
          test -d test-apps/test-${{ matrix.template }}/frontend/src/components/ui
          test -d test-apps/test-${{ matrix.template }}/frontend/src/components/web3
          
          # Check template-specific components
          case "${{ matrix.template }}" in
            chat)
              test -d test-apps/test-${{ matrix.template }}/frontend/src/components/chat
              ;;
            leverage)
              test -f test-apps/test-${{ matrix.template }}/frontend/src/components/leverage/defi/LeverageSlider.tsx
              test -f test-apps/test-${{ matrix.template }}/frontend/src/components/leverage/dataviz/PriceChart.tsx
              ;;
          esac
      
      - name: Verify NavigationBar
        run: |
          # Check that NavigationBar doesn't contain Example Apps dropdown
          if grep -q "Example Apps\|exampleApps" test-apps/test-${{ matrix.template }}/frontend/src/components/NavigationBar.tsx; then
            echo "Error: NavigationBar contains Example Apps dropdown"
            exit 1
          fi
          
      - name: Clean up
        if: always()
        run: rm -rf test-apps

  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run linting
        working-directory: frontend
        run: npm run lint
      
      - name: Run TypeScript check
        working-directory: frontend
        run: npm run type-check
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build